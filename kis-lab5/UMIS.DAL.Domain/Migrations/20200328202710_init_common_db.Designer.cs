// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UMIS.DAL.Domain;

namespace UMIS.DAL.Domain.Migrations
{
    [DbContext(typeof(CommonDbContext))]
    [Migration("20200328202710_init_common_db")]
    partial class init_common_db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.AllergyAnamnesis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Note");

                    b.Property<int?>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("AllergyAnamneses");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssignmentType");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int?>("MedicalExaminationId");

                    b.Property<int>("MedicalHistoryId");

                    b.Property<int?>("MedicalTestResultId");

                    b.Property<int?>("PhysiologicalExaminationId");

                    b.Property<int?>("PhysiologicalExaminationResultId");

                    b.Property<int?>("PhysiologicalIndicationId");

                    b.HasKey("Id");

                    b.HasIndex("MedicalExaminationId");

                    b.HasIndex("MedicalHistoryId");

                    b.HasIndex("MedicalTestResultId");

                    b.HasIndex("PhysiologicalExaminationResultId");

                    b.HasIndex("PhysiologicalIndicationId");

                    b.ToTable("Assignment");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalog.MediacalAnamnesis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnamnesisType");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("MedicalHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("MediacalAnamneses");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowedOnlyForOwner");

                    b.Property<int>("CatalogTypeId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsRemoved");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Name");

                    b.Property<int>("OwnerId");

                    b.HasKey("Id");

                    b.HasIndex("CatalogTypeId");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.CatalogField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowedOnlyForOwner");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("DataType");

                    b.Property<bool>("IsRemoved");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Name");

                    b.Property<int>("OwnerId");

                    b.HasKey("Id");

                    b.ToTable("CatalogFields");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.CatalogFieldValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AllergyAnamnesisId");

                    b.Property<bool>("AllowedOnlyForOwner");

                    b.Property<int?>("AssignmentId");

                    b.Property<int?>("CatalogToCatalogFieldCatalogFieldId");

                    b.Property<int?>("CatalogToCatalogFieldCatalogId");

                    b.Property<int>("CatalogToCatalogFieldId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("DiagnosisId");

                    b.Property<int?>("DianosisId");

                    b.Property<int?>("DisabilityDescriptionId");

                    b.Property<bool>("IsRemoved");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int?>("MediacalAnamnesisId");

                    b.Property<int?>("MedicalExaminationId");

                    b.Property<int?>("MedicalHistoryId");

                    b.Property<int?>("MedicalHistoryNoteId");

                    b.Property<int?>("MedicalTestResultId");

                    b.Property<int>("OwnerId");

                    b.Property<int?>("PatientId");

                    b.Property<int?>("PhysicalExaminationId");

                    b.Property<int?>("PhysiologicalIndicationId");

                    b.Property<string>("Value");

                    b.Property<string>("Value2");

                    b.Property<int?>("WorkHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("AllergyAnamnesisId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("DisabilityDescriptionId");

                    b.HasIndex("MediacalAnamnesisId");

                    b.HasIndex("MedicalExaminationId");

                    b.HasIndex("MedicalHistoryId");

                    b.HasIndex("MedicalHistoryNoteId");

                    b.HasIndex("MedicalTestResultId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicalExaminationId");

                    b.HasIndex("PhysiologicalIndicationId");

                    b.HasIndex("WorkHistoryId");

                    b.HasIndex("CatalogToCatalogFieldCatalogId", "CatalogToCatalogFieldCatalogFieldId");

                    b.ToTable("CatalogFieldValues");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.CatalogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AllowedOnlyForOwner");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsRemoved");

                    b.Property<bool>("IsSystem");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Name");

                    b.Property<int>("OwnerId");

                    b.HasKey("Id");

                    b.ToTable("CatalogTypes");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.RelationsEntityModels.CatalogToCatalogField", b =>
                {
                    b.Property<int>("CatalogId");

                    b.Property<int>("CatalogFieldId");

                    b.Property<string>("DefaultValue");

                    b.Property<string>("DefaultValue2");

                    b.Property<string>("Units");

                    b.HasKey("CatalogId", "CatalogFieldId");

                    b.HasIndex("CatalogFieldId");

                    b.ToTable("CatalogToCatalogField");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnamnesisType");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("MedicalHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.DisabilityDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("DisabilityGroup");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Note");

                    b.Property<int?>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("DisabilityDescriptions");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.MedicalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("MedicalExaminationType");

                    b.Property<int>("MedicalHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("MedicalExaminations");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int?>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistoryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("MedicalHistoryId");

                    b.Property<string>("Subject");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("MedicalHistoryNotes");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.MedicalTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("MedicalExaminationId");

                    b.Property<int>("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("MedicalExaminationId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalTestResult");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<int?>("AllergyAnamnesisId");

                    b.Property<DateTime?>("Birthday");

                    b.Property<int>("BloodGroup");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int?>("DisabilityDescriptionId");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Name");

                    b.Property<string>("OMC");

                    b.Property<string>("Passport");

                    b.Property<string>("Patronymic");

                    b.Property<string>("Phone");

                    b.Property<string>("SNILS");

                    b.Property<string>("Surname");

                    b.Property<int?>("WorkHistoryId");

                    b.HasKey("Id");

                    b.HasIndex("WorkHistoryId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.PhysicalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("MedicalHistoryId");

                    b.Property<int>("PhysicalExaminationType");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("PhysicalExaminations");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.PhysiologicalIndication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<int>("MedicalHistoryId");

                    b.Property<string>("Note");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("PhysiologicalIndications");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.WorkHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime>("LastModificationDate");

                    b.Property<string>("Note");

                    b.Property<int>("PatientId");

                    b.HasKey("Id");

                    b.ToTable("WorkHistories");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.AllergyAnamnesis", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Patient", "Patient")
                        .WithOne("AllergyAnamnesis")
                        .HasForeignKey("UMIS.DAL.Domain.Contracts.Models.Common.AllergyAnamnesis", "PatientId");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Assignment", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalExamination", "MedicalExaminationResult")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory", "MedicalHistory")
                        .WithMany("Assignments")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalTestResult", "MedicalTestResult")
                        .WithMany()
                        .HasForeignKey("MedicalTestResultId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.PhysicalExamination", "PhysiologicalExaminationResult")
                        .WithMany()
                        .HasForeignKey("PhysiologicalExaminationResultId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.PhysiologicalIndication", "PhysiologicalIndicationResult")
                        .WithMany()
                        .HasForeignKey("PhysiologicalIndicationId");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalog.MediacalAnamnesis", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory", "MedicalHistory")
                        .WithMany("MedicalAnamneses")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.Catalog", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.CatalogType", "CatalogType")
                        .WithMany("Catalog")
                        .HasForeignKey("CatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.CatalogFieldValue", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.AllergyAnamnesis")
                        .WithMany("Values")
                        .HasForeignKey("AllergyAnamnesisId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Assignment")
                        .WithMany("Values")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Diagnosis")
                        .WithMany("Values")
                        .HasForeignKey("DiagnosisId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.DisabilityDescription")
                        .WithMany("Values")
                        .HasForeignKey("DisabilityDescriptionId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Catalog.MediacalAnamnesis")
                        .WithMany("Values")
                        .HasForeignKey("MediacalAnamnesisId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalExamination")
                        .WithMany("Values")
                        .HasForeignKey("MedicalExaminationId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory")
                        .WithMany("Values")
                        .HasForeignKey("MedicalHistoryId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistoryNote")
                        .WithMany("Values")
                        .HasForeignKey("MedicalHistoryNoteId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalTestResult")
                        .WithMany("Values")
                        .HasForeignKey("MedicalTestResultId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Patient")
                        .WithMany("Values")
                        .HasForeignKey("PatientId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.PhysicalExamination")
                        .WithMany("Values")
                        .HasForeignKey("PhysicalExaminationId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.PhysiologicalIndication")
                        .WithMany("Values")
                        .HasForeignKey("PhysiologicalIndicationId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.WorkHistory")
                        .WithMany("Values")
                        .HasForeignKey("WorkHistoryId");

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.RelationsEntityModels.CatalogToCatalogField", "CatalogToCatalogField")
                        .WithMany()
                        .HasForeignKey("CatalogToCatalogFieldCatalogId", "CatalogToCatalogFieldCatalogFieldId");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.RelationsEntityModels.CatalogToCatalogField", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.CatalogField", "CatalogField")
                        .WithMany("CatalogToCatalogFields")
                        .HasForeignKey("CatalogFieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Catalogs.Catalog", "Catalog")
                        .WithMany("CatalogToCatalogFields")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Diagnosis", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory", "MedicalHistory")
                        .WithMany("Diagnoses")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.DisabilityDescription", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Patient", "Patient")
                        .WithOne("DisabilityDescription")
                        .HasForeignKey("UMIS.DAL.Domain.Contracts.Models.Common.DisabilityDescription", "PatientId");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.MedicalExamination", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory", "MedicalHistory")
                        .WithMany("MedicalExaminations")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Patient", "Patient")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistoryNote", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory", "MedicalHistory")
                        .WithMany("Notes")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.MedicalTestResult", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalExamination", "MedicalExamination")
                        .WithMany("MedicalTestResults")
                        .HasForeignKey("MedicalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.Patient", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.WorkHistory", "WorkHistory")
                        .WithOne("Patient")
                        .HasForeignKey("UMIS.DAL.Domain.Contracts.Models.Common.Patient", "WorkHistoryId");
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.PhysicalExamination", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory", "MedicalHistory")
                        .WithMany("PhysicalExaminations")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UMIS.DAL.Domain.Contracts.Models.Common.PhysiologicalIndication", b =>
                {
                    b.HasOne("UMIS.DAL.Domain.Contracts.Models.Common.MedicalHistory", "MedicalHistory")
                        .WithMany("PhysiologicalIndications")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
